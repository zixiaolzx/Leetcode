/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) return null;
        return mergeHelper(lists, 0, lists.length - 1);
    }
    
    public ListNode mergeHelper(ListNode[] lists, int start, int end){
        if(start == end) return lists[start];
        int mid = start + (end - start) / 2;
        ListNode left = mergeHelper(lists, start, mid);
        ListNode right = mergeHelper(lists, mid + 1, end);
        return mergeTwoLists(left, right);
    }
    
    public ListNode mergeTwoLists(ListNode left, ListNode right){
        if(left == null) return right;
        if(right == null) return left;
        
        ListNode fakehead = new ListNode(0);
        ListNode cur = fakehead;
        while(left != null && right != null){
            if(left.val < right.val){
                cur.next = left;
                cur = left;
                left = left.next;
            }else{
                cur.next = right;
                cur = right;
                right = right.next;
            }
        }
        if(left != null){
            cur.next = left;
        }
        if(right != null){
            cur.next = right;
        }
        return fakehead.next;
    }
}